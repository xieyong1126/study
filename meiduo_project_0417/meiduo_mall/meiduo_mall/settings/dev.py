# 开发环境的配置文件（settings.py文件，默认就是开发环境的配置文件）
"""
Django settings for meiduo_mall project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

# 导包路径：决定如何通过包路径找到对应的包，任何python项目都有的，美多商城也有的
# 查看美多商城的导包路径
# 重要提示：
    # 要想知道工程中的包该如何导入，必须学会查询工程的导包路径
    # 特别是接手二手项目时，务必去看一下导包路径，因为二手项目的目录结果何其恶心，你不一定能想到
import sys
print(sys.path)

# 为什么导入Django里面的东西，都是从from django ...
# 就是因为默认有个导包路径已经帮我我们指向了 '/Users/zhangjie/.virtualenvs/django_base_2.2/lib/python3.8/site-packages'
# 而django就在安装在上面导包路径中的一个包，
# 所以导入django里面的东西，我们可以直接默认的导包路径去写
# 类似于我们要去超市：出门 ————》上车 ---》下车  ---》 进超市
# 那么如果有人，直接把我们带到超市门口了，那么我们直接 进超市
"""
[
    '/Users/zhangjie/Desktop/meiduo_project_0417/meiduo_mall', # 默认已经把我们带到了第一个meiduo_mall
    '/Applications/PyCharm 3.app/Contents/plugins/python/helpers/pydev', 
    '/Users/zhangjie/Desktop/meiduo_project_0417', 
    '/Applications/PyCharm 3.app/Contents/plugins/python/helpers/pycharm_display', 
    '/Applications/PyCharm 3.app/Contents/plugins/python/helpers/third_party/thriftpy', 
    '/Applications/PyCharm 3.app/Contents/plugins/python/helpers/pydev', 
    '/Users/zhangjie/Library/Caches/JetBrains/PyCharm2020.1/cythonExtensions', 
    '/Users/zhangjie/Desktop/meiduo_project_0417/meiduo_mall', 
    '/Users/zhangjie/.virtualenvs/django_base_2.2/lib/python38.zip', 
    '/Users/zhangjie/.virtualenvs/django_base_2.2/lib/python3.8', 
    '/Users/zhangjie/.virtualenvs/django_base_2.2/lib/python3.8/lib-dynload', 
    '/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8', 
    '/Users/zhangjie/.virtualenvs/django_base_2.2/lib/python3.8/site-packages', 
    '/Applications/PyCharm 3.app/Contents/plugins/python/helpers/pycharm_matplotlib_backend', 
    '/Users/zhangjie/.virtualenvs/django_base_2.2/lib/python3.8/site-packages/IPython/extensions'
]
"""


import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
print(BASE_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'h3%vjxu0#(u+1ifqs_%a1fl#hgi@tu*p=3azx9x5y-=#d8h-ck'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 指定运行访问Django的域名，我们可以直接指定通配符，允许所有的域名或者IP访问django
ALLOWED_HOSTS = ['*']


# Application definition
# 注册子应用
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth', # Django默认的用户认证系统：它里面处理完了跟用户相关的一切操作
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders', # 注册跨域的子应用
    'django_crontab', # 定时任务
    'haystack', # 全文检索

    'apps.users', # 用户模块
    'apps.verifications', # 验证模块
    'apps.oauth', # 第三方登录
    'apps.areas', # 省市区
    'apps.contents', # 首页
    'apps.goods', # 商品
    'apps.carts', # 购物车
    'apps.orders', # 订单
    'apps.payment', # 支付
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # 添加中间件
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware', # 注释掉，保证非GET请求可以正常发送
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 添加跨域的白名单(一定要拷贝我的代码，不要手敲)
CORS_ORIGIN_WHITELIST = [
    "http://www.meiduo.site:8080",
    "http://127.0.0.1:8080",
    "http://localhost:8080"
]
# 允许跨域时携带cookie
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'meiduo_mall.urls'

# 配置模板
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # /Users/zhangjie/Desktop/meiduo_project_0417/meiduo_mall/meiduo_mall/templates
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meiduo_mall.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
# 配置MySQL数据库
DATABASES = {
    'default': { # 主机（写）
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '192.168.103.100',
        'PORT': '3306', # 主机端口
        'USER': 'itcast_0417',
        'PASSWORD': '123456',
        'NAME': 'meiduo_0417'
    },
    'slave': { # 从机（读）
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '192.168.103.100',
        'PORT': '8306', # 从机端口
        'USER': 'root',
        'PASSWORD': 'mysql',
        'NAME': 'meiduo_0417'
    }
}

# 指定读写分离的路由类
DATABASE_ROUTERS = ['meiduo_mall.utils.db_router.MasterSlaveDBRouter']

# 配置Redis后端
CACHES = {
    "default": { # 默认的缓存配置
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.103.100:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 我的需求是希望将session存储在redis的1号库
    "session": { # session后端
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.103.100:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "verify_code": { # 验证码
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.103.100:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "history": { # 用户浏览记录
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.103.100:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "carts": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.103.100:6379/5",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}
# 配置session后端
# SESSION_ENGINE = 'django.contrib.sessions.backends.db' # Django默认的配置
SESSION_ENGINE = "django.contrib.sessions.backends.cache" # 现在修改为redis存储session
SESSION_CACHE_ALIAS = "session" # 存储session数据时使用的配置别名

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# 配置日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/meiduo.log'),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}

# 指定Django程序默认的用户模型类为自定义的用户模型类
# AUTH_USER_MODEL = 'auth.User' # Django默认的
# AUTH_USER_MODEL = '子应用.自定义的用户模型类'
AUTH_USER_MODEL = 'users.User'


# QQ登录参数
QQ_CLIENT_ID = '101474184' # 我们申请的 客户端id
QQ_CLIENT_SECRET = 'c6ce949e04e12ecc909ae6a8b09b637c' # 我们申请的 客户端秘钥
QQ_REDIRECT_URI = 'http://www.meiduo.site:8080/oauth_callback.html' # 登录成功后回调的路径


# 配置邮件服务器：send_mail()方法会去使用这些配置参数，连接到SMTP服务器上
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # 指定邮件后端
EMAIL_HOST = 'smtp.163.com' # 发邮件主机
EMAIL_PORT = 25 # 发邮件端口
EMAIL_HOST_USER = 'hmmeiduo@163.com' # 授权的邮箱
EMAIL_HOST_PASSWORD = 'hmmeiduo123' # 邮箱授权时获得的密码，非注册登录密码
EMAIL_FROM = '美多商城<hmmeiduo@163.com>' # 发件人抬头

# 邮箱激活链接
EMAIL_VERIFY_URL = 'http://www.meiduo.site:8080/success_verify_email.html?token='

# 定时任务
CRONJOBS = [
    # 每1分钟生成一次首页静态文件
    # ('定时时间', '定时任务', '>> ' + '日志文件路径')
    ('*/1 * * * *', 'apps.contents.crons.generate_static_index_html', '>> ' + os.path.join(BASE_DIR, 'logs/crontab.log'))
]
# 定义任务，默认不识别中文编码
# 解决 crontab 中文问题
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'

# 指定自定义的文件存储类
DEFAULT_FILE_STORAGE = 'meiduo_mall.utils.fastdfs.fdfs_storage.FastDFSStorage'

# 指定FastDFS服务器的位置
# FDFS_URL = 'http://192.168.103.100:8888/'
FDFS_URL = 'http://image.meiduo.site:8888/'

# Haystack
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://192.168.103.100:9200/', # Elasticsearch服务器ip地址，端口号固定为9200
        'INDEX_NAME': 'meiduo_mall', # Elasticsearch建立的索引库的名称
    },
}

# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 指定haystack分页时每页记录的个数
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5

# 对接支付宝
ALIPAY_APPID = '2016082100308405' # 应用ID
ALIPAY_DEBUG = True # 调试模式，对接沙箱应用时为True,对接正式应用时为False
ALIPAY_URL = 'https://openapi.alipaydev.com/gateway.do' # 对接支付宝的网关，如果对接沙箱应用就是测试网关
ALIPAY_RETURN_URL = "http://www.meiduo.site:8080/pay_success.html" # 支付成功后的回调地址